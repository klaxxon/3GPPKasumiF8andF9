package kasumi

import (
	"bytes"
	"testing"
)

// TS 35.204
/*
3.3.2
Key= D3C5D592327FB11C4035C6680AF8C6D1
Count= 398A59B4
Bearer= 15
Direction = 1
Length= 253 bits
Plaintext:
981BA6824C1BFB1A B485472029B71D80 8CE33E2CC3C0B5FC 1F3DE8A6DC66B1F0
Ciphertext:
CA0A60B4299E6954 DBF7686E46F44190 DC81B074044813B5 0AB1FE46597BA338
*/
func TestSet3_3_2(t *testing.T) {
	key := []byte{0xD3, 0xC5, 0xD5, 0x92, 0x32, 0x7F, 0xB1, 0x1C, 0x40, 0x35, 0xC6, 0x68, 0x0A, 0xF8, 0xC6, 0xD1}
	data := []byte{0x98, 0x1B, 0xA6, 0x82, 0x4C, 0x1B, 0xFB, 0x1A, 0xB4, 0x85, 0x47, 0x20, 0x29, 0xB7, 0x1D, 0x80, 0x8C, 0xE3, 0x3E, 0x2C, 0xC3, 0xC0, 0xB5, 0xFC, 0x1F, 0x3D, 0xE8, 0xA6, 0xDC, 0x66, 0xB1, 0xF0}
	expected := []byte{0xCA, 0x0A, 0x60, 0xB4, 0x29, 0x9E, 0x69, 0x54, 0xDB, 0xF7, 0x68, 0x6E, 0x46, 0xF4, 0x41, 0x90, 0xDC, 0x81, 0xB0, 0x74, 0x04, 0x48, 0x13, 0xB5, 0x0A, 0xB1, 0xFE, 0x46, 0x59, 0x7B, 0xA3, 0x38}
	d := Kasumi_f8(key, 0x398A59B4, 0x15, 1, data, 253)
	if bytes.Compare(d, expected) != 0 {
		t.Errorf("Expected cypher failed")
	}
}

/*  3.4
Key= 2BD6459F82C440E0952C49104805FF48
Count= C675A64B
Bearer= 0C
Direction = 1
Length= 798 bits
Plaintext:
7EC61272743BF161 4726446A6C38CED1 66F6CA76EB543004 4286346CEF130F92
922B03450D3A9975 E5BD2EA0EB55AD8E 1B199E3EC4316020 E9A1B285E7627953
59B7BDFD39BEF4B2 484583D5AFE082AE E638BF5FD5A60619 3901A08F4AB41AAB
9B134880
Cipher text:
1061793DAAACBE40 C9431E292B7FF494 96DB0D31CE24710C 01ACFF1B2C441FA9
3BB3BD65DE18027A 14CCA571A42E8B12 74AE30AC411AB6AF D88F924E65F9812D
FA80EF8E9A7EA753 391D09F480D9147C B39C23A1ACB9AC9B 2A6B4709F7E6DD84
D8FA59A4
*/
func TestSet3_4(t *testing.T) {
	key := []byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC4, 0x40, 0xE0, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x05, 0xFF, 0x48}
	data := []byte{0x7E, 0xC6, 0x12, 0x72, 0x74, 0x3B, 0xF1, 0x61, 0x47, 0x26, 0x44, 0x6A, 0x6C, 0x38, 0xCE, 0xD1, 0x66, 0xF6, 0xCA, 0x76, 0xEB, 0x54, 0x30, 0x04, 0x42, 0x86, 0x34, 0x6C, 0xEF, 0x13, 0x0F, 0x92, 0x92, 0x2B, 0x03, 0x45, 0x0D, 0x3A, 0x99, 0x75, 0xE5, 0xBD, 0x2E, 0xA0, 0xEB, 0x55, 0xAD, 0x8E, 0x1B, 0x19, 0x9E, 0x3E, 0xC4, 0x31, 0x60, 0x20, 0xE9, 0xA1, 0xB2, 0x85, 0xE7, 0x62, 0x79, 0x53, 0x59, 0xB7, 0xBD, 0xFD, 0x39, 0xBE, 0xF4, 0xB2, 0x48, 0x45, 0x83, 0xD5, 0xAF, 0xE0, 0x82, 0xAE, 0xE6, 0x38, 0xBF, 0x5F, 0xD5, 0xA6, 0x06, 0x19, 0x39, 0x01, 0xA0, 0x8F, 0x4A, 0xB4, 0x1A, 0xAB, 0x9B, 0x13, 0x48, 0x80}
	expected := []byte{0x10, 0x61, 0x79, 0x3D, 0xAA, 0xAC, 0xBE, 0x40, 0xC9, 0x43, 0x1E, 0x29, 0x2B, 0x7F, 0xF4, 0x94, 0x96, 0xDB, 0x0D, 0x31, 0xCE, 0x24, 0x71, 0x0C, 0x01, 0xAC, 0xFF, 0x1B, 0x2C, 0x44, 0x1F, 0xA9, 0x3B, 0xB3, 0xBD, 0x65, 0xDE, 0x18, 0x02, 0x7A, 0x14, 0xCC, 0xA5, 0x71, 0xA4, 0x2E, 0x8B, 0x12, 0x74, 0xAE, 0x30, 0xAC, 0x41, 0x1A, 0xB6, 0xAF, 0xD8, 0x8F, 0x92, 0x4E, 0x65, 0xF9, 0x81, 0x2D, 0xFA, 0x80, 0xEF, 0x8E, 0x9A, 0x7E, 0xA7, 0x53, 0x39, 0x1D, 0x09, 0xF4, 0x80, 0xD9, 0x14, 0x7C, 0xB3, 0x9C, 0x23, 0xA1, 0xAC, 0xB9, 0xAC, 0x9B, 0x2A, 0x6B, 0x47, 0x09, 0xF7, 0xE6, 0xDD, 0x84, 0xD8, 0xFA, 0x59, 0xA4}
	d := Kasumi_f8(key, 0xC675A64B, 0x0C, 1, data, 798)
	if bytes.Compare(d, expected) != 0 {
		t.Errorf("Expected cypher failed")
	}
}

func BenchmarkSet3_4(b *testing.B) {
	key := []byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC4, 0x40, 0xE0, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x05, 0xFF, 0x48}
	data := []byte{0x7E, 0xC6, 0x12, 0x72, 0x74, 0x3B, 0xF1, 0x61, 0x47, 0x26, 0x44, 0x6A, 0x6C, 0x38, 0xCE, 0xD1, 0x66, 0xF6, 0xCA, 0x76, 0xEB, 0x54, 0x30, 0x04, 0x42, 0x86, 0x34, 0x6C, 0xEF, 0x13, 0x0F, 0x92, 0x92, 0x2B, 0x03, 0x45, 0x0D, 0x3A, 0x99, 0x75, 0xE5, 0xBD, 0x2E, 0xA0, 0xEB, 0x55, 0xAD, 0x8E, 0x1B, 0x19, 0x9E, 0x3E, 0xC4, 0x31, 0x60, 0x20, 0xE9, 0xA1, 0xB2, 0x85, 0xE7, 0x62, 0x79, 0x53, 0x59, 0xB7, 0xBD, 0xFD, 0x39, 0xBE, 0xF4, 0xB2, 0x48, 0x45, 0x83, 0xD5, 0xAF, 0xE0, 0x82, 0xAE, 0xE6, 0x38, 0xBF, 0x5F, 0xD5, 0xA6, 0x06, 0x19, 0x39, 0x01, 0xA0, 0x8F, 0x4A, 0xB4, 0x1A, 0xAB, 0x9B, 0x13, 0x48, 0x80}
	for a := 0; a < b.N; a++ {
		Kasumi_f8(key, 0xC675A64B, 0x0C, 1, data, 798)
	}
}

/* 3.5
Key= 0A8B6BD8D9B08B08D64E32D1817777FB
Count= 544D49CD
Bearer= 04
Direction = 0
Length= 310 bits
Plaintext:
FD40A41D370A1F65 745095687D47BA1D 36D2349E23F64439 2C8EA9C49D40C132
71AFF264D0F248
Cipher text:
22B707A481F264BE 691994C2A201354D 5741A2E6B4624EE9 DF30D8D94535165B
D439223EBBD074
*/
func TestSet3_5(t *testing.T) {
	key := []byte{0x0A, 0x8B, 0x6B, 0xD8, 0xD9, 0xB0, 0x8B, 0x08, 0xD6, 0x4E, 0x32, 0xD1, 0x81, 0x77, 0x77, 0xFB}
	data := []byte{0xFD, 0x40, 0xA4, 0x1D, 0x37, 0x0A, 0x1F, 0x65, 0x74, 0x50, 0x95, 0x68, 0x7D, 0x47, 0xBA, 0x1D, 0x36, 0xD2, 0x34, 0x9E, 0x23, 0xF6, 0x44, 0x39, 0x2C, 0x8E, 0xA9, 0xC4, 0x9D, 0x40, 0xC1, 0x32, 0x71, 0xAF, 0xF2, 0x64, 0xD0, 0xF2, 0x48}
	expected := []byte{0x22, 0xB7, 0x07, 0xA4, 0x81, 0xF2, 0x64, 0xBE, 0x69, 0x19, 0x94, 0xC2, 0xA2, 0x01, 0x35, 0x4D, 0x57, 0x41, 0xA2, 0xE6, 0xB4, 0x62, 0x4E, 0xE9, 0xDF, 0x30, 0xD8, 0xD9, 0x45, 0x35, 0x16, 0x5B, 0xD4, 0x39, 0x22, 0x3E, 0xBB, 0xD0, 0x74}
	d := Kasumi_f8(key, 0x544D49CD, 0x04, 0, data, 310)
	if bytes.Compare(d, expected) != 0 {
		t.Errorf("Expected cypher failed")
	}
}

/*
4.2.2
Key= 2BD6459F82C5B300952C49104881FF48
Count= 38A6F056
Fresh= B8AEFDA9
Direction = 0
Length= 88 bits
Message: 3332346263393861 373479
Output: 46E00D4B
*/
func TestSet4_2_2(t *testing.T) {
	key := []byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48}
	data := []byte{0x33, 0x32, 0x34, 0x62, 0x63, 0x39, 0x38, 0x61, 0x37, 0x34, 0x79}
	mac := Kasumi_f9(key, 0x38a6f056, 0xb8aefda9, 0, data, 88)
	if mac != 0x46e00d4b {
		t.Errorf("Expected 0x46e00d4b, got %x", mac)
	}
}

/* 4.3
Key= 7E5E94431E11D73828D739CC6CED4573
Count= 36AF6144
Fresh= 9838F03A
Direction = 1
Length= 254 bits
Message:B3D3C9170A4E1632 F60F861013D22D84 B726B6A278D802D1 EEAF1321BA5929DC
Output: 2BEEF3AC
*/
func TestSet4_3(t *testing.T) {
	key := []byte{0x7E, 0x5E, 0x94, 0x43, 0x1E, 0x11, 0xD7, 0x38, 0x28, 0xD7, 0x39, 0xCC, 0x6C, 0xED, 0x45, 0x73}
	data := []byte{0xB3, 0xD3, 0xC9, 0x17, 0x0A, 0x4E, 0x16, 0x32, 0xF6, 0x0F, 0x86, 0x10, 0x13, 0xD2, 0x2D, 0x84, 0xB7, 0x26, 0xB6, 0xA2, 0x78, 0xD8, 0x02, 0xD1, 0xEE, 0xAF, 0x13, 0x21, 0xBA, 0x59, 0x29, 0xDC}
	mac := Kasumi_f9(key, 0x36AF6144, 0x9838F03A, 1, data, 254)
	if mac != 0x2BEEF3AC {
		t.Errorf("Expected 0x2BEEF3AC, got %x", mac)
	}
}

/* 4.4
Key= D3419BE821087ACD02123A9248033359
Count= C7590EA9
Fresh= 57D5DF7D
Direction = 0
Length= 511 bits
Message:BBB057038809496B CFF86D6FBC8CE5B1 35A06B166054F2D5 65BE8ACE75DC851E 0BCDD8F07141C495 872FB5D8C0C66A8B 6DA556663E4E4612  05D84580BEE5BC7E
Output: 02158170
*/
func TestSet4_4(t *testing.T) {
	key := []byte{0xD3, 0x41, 0x9B, 0xE8, 0x21, 0x08, 0x7A, 0xCD, 0x02, 0x12, 0x3A, 0x92, 0x48, 0x03, 0x33, 0x59}
	data := []byte{0xBB, 0xB0, 0x57, 0x03, 0x88, 0x09, 0x49, 0x6B, 0xCF, 0xF8, 0x6D, 0x6F, 0xBC, 0x8C, 0xE5, 0xB1, 0x35, 0xA0, 0x6B, 0x16, 0x60, 0x54, 0xF2, 0xD5, 0x65, 0xBE, 0x8A, 0xCE, 0x75, 0xDC, 0x85, 0x1E, 0x0B, 0xCD, 0xD8, 0xF0, 0x71, 0x41, 0xC4, 0x95, 0x87, 0x2F, 0xB5, 0xD8, 0xC0, 0xC6, 0x6A, 0x8B, 0x6D, 0xA5, 0x56, 0x66, 0x3E, 0x4E, 0x46, 0x12, 0x05, 0xD8, 0x45, 0x80, 0xBE, 0xE5, 0xBC, 0x7E}
	mac := Kasumi_f9(key, 0xC7590EA9, 0x57D5DF7D, 0, data, 511)
	if mac != 0x02158170 {
		t.Errorf("Expected 0x02158170, got %x", mac)
	}
}

/* 4.5
Key= 83FD23A244A74CF358DA3019F1722635
Count= 36AF6144
Fresh= 4F302AD2
Direction = 1
Length= 768 bits
Message:
35C68716633C66FB 750C266865D53C11 EA05B1E9FA49C839 8D48E1EFA5909D39
47902837F5AE96D5 A05BC8D61CA8DBEF 1B13A4B4ABFE4FB1 006045B674BB5472
9304C382BE53A5AF 05556176F6EAA2EF 1D05E4B083181EE6 74CDA5A485F74D7A
Output: 95AE41BA
*/
func TestSet4_5(t *testing.T) {
	key := []byte{0x83, 0xFD, 0x23, 0xA2, 0x44, 0xA7, 0x4C, 0xF3, 0x58, 0xDA, 0x30, 0x19, 0xF1, 0x72, 0x26, 0x35}
	data := []byte{0x35, 0xC6, 0x87, 0x16, 0x63, 0x3C, 0x66, 0xFB, 0x75, 0x0C, 0x26, 0x68, 0x65, 0xD5, 0x3C, 0x11, 0xEA, 0x05, 0xB1, 0xE9, 0xFA, 0x49, 0xC8, 0x39, 0x8D, 0x48, 0xE1, 0xEF, 0xA5, 0x90, 0x9D, 0x39, 0x47, 0x90, 0x28, 0x37, 0xF5, 0xAE, 0x96, 0xD5, 0xA0, 0x5B, 0xC8, 0xD6, 0x1C, 0xA8, 0xDB, 0xEF, 0x1B, 0x13, 0xA4, 0xB4, 0xAB, 0xFE, 0x4F, 0xB1, 0x00, 0x60, 0x45, 0xB6, 0x74, 0xBB, 0x54, 0x72, 0x93, 0x04, 0xC3, 0x82, 0xBE, 0x53, 0xA5, 0xAF, 0x05, 0x55, 0x61, 0x76, 0xF6, 0xEA, 0xA2, 0xEF, 0x1D, 0x05, 0xE4, 0xB0, 0x83, 0x18, 0x1E, 0xE6, 0x74, 0xCD, 0xA5, 0xA4, 0x85, 0xF7, 0x4D, 0x7A}
	mac := Kasumi_f9(key, 0x36AF6144, 0x4F302AD2, 1, data, 768)
	if mac != 0x95AE41BA {
		t.Errorf("Expected 0x95AE41BA, got %x", mac)
	}
}

/* 4.6
Key= 6832A65CFF4473621EBDD4BA26A921FE
Count= 36AF6144
Fresh= 9838F03A
Direction = 0
Length= 383 bits
Message:
D3C5383962682071 7765667620323837 636240981BA6824C 1BFB1AB485472029
B71D808CE33E2CC3 C0B5FC1F3DE8A6DC
Output: 8B2D570F
*/
func TestSet4_6(t *testing.T) {
	key := []byte{0x68, 0x32, 0xA6, 0x5C, 0xFF, 0x44, 0x73, 0x62, 0x1E, 0xBD, 0xD4, 0xBA, 0x26, 0xA9, 0x21, 0xFE}
	data := []byte{0xD3, 0xC5, 0x38, 0x39, 0x62, 0x68, 0x20, 0x71, 0x77, 0x65, 0x66, 0x76, 0x20, 0x32, 0x38, 0x37, 0x63, 0x62, 0x40, 0x98, 0x1B, 0xA6, 0x82, 0x4C, 0x1B, 0xFB, 0x1A, 0xB4, 0x85, 0x47, 0x20, 0x29, 0xB7, 0x1D, 0x80, 0x8C, 0xE3, 0x3E, 0x2C, 0xC3, 0xC0, 0xB5, 0xFC, 0x1F, 0x3D, 0xE8, 0xA6, 0xDC}
	mac := Kasumi_f9(key, 0x36AF6144, 0x9838F03A, 0, data, 383)
	if mac != 0x8B2D570F {
		t.Errorf("Expected 0x8B2D570F, got %x", mac)
	}
}

/* 4.7
Key= 5D0A80D8134AE19677824B671E838AF4
Count= 7827FAB2
Fresh= A56C6CA2
Direction = 1
Length= 2558 bits
Message:
70DEDF2DC42C5CBD 3A96F8A0B11418B3 608D5733604A2CD3
153BE2D3C06DFDB2 D16E9C357158BE6A 41D6B861E491DB3F
D58953730FF30C9E C470FFCD663DC342 01C36ADDC0111C35
3731F8B4BAA8D1A8 9C06E81199A97162 27BE344EFCB436DD
C399993FC77394F9 E09720A811850EF2 3B2EE05D9E617360
012A00BB413B9CB8 188A703CD6BAE31C C67B34B1B00019E6
7C9EF8DEC0094E53 3763478D58D2C5F5 B827A0148C5948A9
E62CE74007E991E3 7EA823FA0FB21923 B79905B733B631E6
1A9C730C52FF72D9 D308EEDBAB21FDE1 43A0EA17E23EDC1F
A15464EAA733385D BBEB6FD73509B857 E6A419DCA1D8907A
6AABC70CE3193BB5 BFEB518EFCF048D7 B38AFEE7CFDB582E
D0F096C064C3B5E2 9D86E1C0C18EA51A A2B2A690F02671FE
6931ACF84F465A64 C7D6860A3831AC35 74CBB3638A2033AA
F977FBAC4DFA35EC
Output: 3AE4BFF3
*/
func TestSet4_7(t *testing.T) {
	key := []byte{0x5D, 0x0A, 0x80, 0xD8, 0x13, 0x4A, 0xE1, 0x96, 0x77, 0x82, 0x4B, 0x67, 0x1E, 0x83, 0x8A, 0xF4}
	data := []byte{
		0x70, 0xDE, 0xDF, 0x2D, 0xC4, 0x2C, 0x5C, 0xBD, 0x3A, 0x96, 0xF8, 0xA0, 0xB1, 0x14, 0x18, 0xB3, 0x60, 0x8D, 0x57, 0x33, 0x60, 0x4A, 0x2C, 0xD3, 0x6A, 0xAB, 0xC7, 0x0C, 0xE3, 0x19, 0x3B, 0xB5,
		0x15, 0x3B, 0xE2, 0xD3, 0xC0, 0x6D, 0xFD, 0xB2, 0xD1, 0x6E, 0x9C, 0x35, 0x71, 0x58, 0xBE, 0x6A, 0x41, 0xD6, 0xB8, 0x61, 0xE4, 0x91, 0xDB, 0x3F, 0xBF, 0xEB, 0x51, 0x8E, 0xFC, 0xF0, 0x48, 0xD7,
		0xD5, 0x89, 0x53, 0x73, 0x0F, 0xF3, 0x0C, 0x9E, 0xC4, 0x70, 0xFF, 0xCD, 0x66, 0x3D, 0xC3, 0x42, 0x01, 0xC3, 0x6A, 0xDD, 0xC0, 0x11, 0x1C, 0x35, 0xB3, 0x8A, 0xFE, 0xE7, 0xCF, 0xDB, 0x58, 0x2E,
		0x37, 0x31, 0xF8, 0xB4, 0xBA, 0xA8, 0xD1, 0xA8, 0x9C, 0x06, 0xE8, 0x11, 0x99, 0xA9, 0x71, 0x62, 0x27, 0xBE, 0x34, 0x4E, 0xFC, 0xB4, 0x36, 0xDD, 0xD0, 0xF0, 0x96, 0xC0, 0x64, 0xC3, 0xB5, 0xE2,
		0xC3, 0x99, 0x99, 0x3F, 0xC7, 0x73, 0x94, 0xF9, 0xE0, 0x97, 0x20, 0xA8, 0x11, 0x85, 0x0E, 0xF2, 0x3B, 0x2E, 0xE0, 0x5D, 0x9E, 0x61, 0x73, 0x60, 0x9D, 0x86, 0xE1, 0xC0, 0xC1, 0x8E, 0xA5, 0x1A,
		0x01, 0x2A, 0x00, 0xBB, 0x41, 0x3B, 0x9C, 0xB8, 0x18, 0x8A, 0x70, 0x3C, 0xD6, 0xBA, 0xE3, 0x1C, 0xC6, 0x7B, 0x34, 0xB1, 0xB0, 0x00, 0x19, 0xE6, 0xA2, 0xB2, 0xA6, 0x90, 0xF0, 0x26, 0x71, 0xFE,
		0x7C, 0x9E, 0xF8, 0xDE, 0xC0, 0x09, 0x4E, 0x53, 0x37, 0x63, 0x47, 0x8D, 0x58, 0xD2, 0xC5, 0xF5, 0xB8, 0x27, 0xA0, 0x14, 0x8C, 0x59, 0x48, 0xA9, 0x69, 0x31, 0xAC, 0xF8, 0x4F, 0x46, 0x5A, 0x64,
		0xE6, 0x2C, 0xE7, 0x40, 0x07, 0xE9, 0x91, 0xE3, 0x7E, 0xA8, 0x23, 0xFA, 0x0F, 0xB2, 0x19, 0x23, 0xB7, 0x99, 0x05, 0xB7, 0x33, 0xB6, 0x31, 0xE6, 0xC7, 0xD6, 0x86, 0x0A, 0x38, 0x31, 0xAC, 0x35,
		0x1A, 0x9C, 0x73, 0x0C, 0x52, 0xFF, 0x72, 0xD9, 0xD3, 0x08, 0xEE, 0xDB, 0xAB, 0x21, 0xFD, 0xE1, 0x43, 0xA0, 0xEA, 0x17, 0xE2, 0x3E, 0xDC, 0x1F, 0x74, 0xCB, 0xB3, 0x63, 0x8A, 0x20, 0x33, 0xAA,
		0xA1, 0x54, 0x64, 0xEA, 0xA7, 0x33, 0x38, 0x5D, 0xBB, 0xEB, 0x6F, 0xD7, 0x35, 0x09, 0xB8, 0x57, 0xE6, 0xA4, 0x19, 0xDC, 0xA1, 0xD8, 0x90, 0x7A, 0xF9, 0x77, 0xFB, 0xAC, 0x4D, 0xFA, 0x35, 0xEC}
	mac := Kasumi_f9(key, 0x7827FAB2, 0xA56C6CA2, 1, data, 2558)
	if mac != 0x3AE4BFF3 {
		t.Errorf("Expected 0x3AE4BFF3, got %x", mac)
	}
}
